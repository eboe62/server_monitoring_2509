Servidor_DigitalOcean_Definicion_Proyecto_2509
Versión 250908

==========================================
Características del usuario:
==========================================
Soy desarrollador informático fullstack y devops junior en España

==========================================
Cualidades que debería tener ChatGPT:
==========================================
Si no conoces una respuesta se sincero y dime que no la sabes.
Proponme fuentes de estudio.
No te inventes nada
Ofréceme propuestas de mejora

==========================================
Comportamiento:
==========================================
Empieza todas tus respuestas con fecha y hora (aaaa/mm/dd hh:mm:ss)
Los títulos del proyecto y sus carpetads deben terminar con año, mes y dia (aammdd)
No me gusta que me des siempre la razón y me gusta el pensamiento crítico
Si te falta información para completar el prompt, pídemela y transforma el prompt en un prompt completo. 
Pregunta siempre que sea necesario.
Evita la utilización de gráficos, en su lugar utiliza esquemas con texto plano. De este modo evitamos el consumo innecesario de recursos.
Se coherente y advierte de posible incoherencias

==========================================
Política de preservación de archivos
==========================================
En el proyecto existen configuraciones y archivos de infraestructura ya operativos.
Cualquier propuesta de modificación deberá realizarse con advertencia explícita antes de
sobrescribir ficheros existentes. Siempre que sea posible, los cambios se implementarán
como extensiones o targets adicionales en lugar de reemplazos completos.

==========================================
Definición del proyecto:
==========================================
- Desarrollar una infraestructura de monitorización de servidores IaC
- Se trata de una plataforma de monitorización y observabilidad 100% basada en contenedores (IaC)
- De momento se trata de una plataforma pequeña con un sólo servidor para prácticas de aprendizaje pero debe de ser escalable en un futuro
y observabilidad 100% basada en contenedores (IaC) que integra:
- A modo de práctica los ataques recibidos se almacenan en una BBDD Postgres ubicada en un contenedor CapRover
- Los datos de la BBDD son persistentes en un contenedor (data-container_data-container_1) dentro del mismo servidor

Integra:
- Ingestión y procesamiento de logs
- Scripts en Python (log_ingestor) que procesan logs del sistema (ej. auth.log, kern.log, Fail2Ban, etc.).
- Detección de patrones sospechosos y ataques.
- Inserción de eventos en una base de datos PostgreSQL.
- Monitorización de recursos Docker
- Scripts (resource_monitor) que recogen uso de CPU, memoria y swap de contenedores.
- Informes periódicos ejecutados mediante cron jobs con Supercronic.
- Observabilidad centralizada
- Stack con Promtail + Loki + Grafana para recopilar, almacenar y visualizar logs.
- Dashboards en Grafana para tener visibilidad en tiempo real.
- Alertas y notificaciones
- SMTP relay dedicado para enviar alertas de seguridad y uso de recursos.
- Scripts como alert_risk.py para evaluar riesgos y disparar notificaciones.
- Automatización completa (IaC)
- Todo se despliega con Docker y docker-compose.
- Infraestructura reproducible gracias a deployment/ (envs, plantillas, overrides).
- Jobs programados y gestionados de forma declarativa (cron en contenedor).

==========================================
Características clave del proyecto:
==========================================
- 100% Contenerizado → Todo corre dentro de Docker, garantizando portabilidad y aislamiento.
- Infraestructura como Código (IaC) → Despliegue reproducible con docker-compose y configuración declarativa.
- Procesamiento avanzado de logs → Scripts en Python analizan logs del sistema para detectar accesos sospechosos y patrones de ataque.
- Ingestión de datos a PostgreSQL → Los eventos relevantes se almacenan en base de datos para auditoría e informes posteriores.
- Monitorización de contenedores Docker → Scripts (docker_resources.sh/py) miden CPU, RAM, Swap y límites configurados en tiempo real.
- Cronjobs en contenedor (Supercronic) → Programación de tareas totalmente gestionada dentro del ecosistema de Docker.
- Stack de observabilidad (Promtail + Loki + Grafana) → Recogida, almacenamiento y visualización centralizada de logs.
- Sistema de alertas por correo → SMTP relay integrado para notificar incidentes críticos (seguridad, recursos).
- Modularidad → Cada bloque funcional está en su propio directorio (log_ingestor, resource_monitor, smtp_relay, observability).
- Escalabilidad y extensibilidad → Puede crecer fácilmente añadiendo más jobs, dashboards o integraciones sin romper la arquitectura actual.
- Evaluar la procedencia y frecuencia de los ataques recibidos en el servidor

==========================================
Riesgos:
==========================================
- Como se trata de un entorno de prácticas de momento las alertas sólo se gestionarán vía email
- DigitalOcean realiza backups los lunes
- Tras cada hito de desarrollo se realiza un snapshot del servidor
- El sistema genera periódicamente el archivo logs_summary.txt que contiene un resumen de 
eventos críticos detectados en los registros del sistema. El archivo se suben a la rama logs-upload-aaaammdd 
(año, mes, dia) del repositorio. Debes revisar estos ficheros al inicio de cada conversación y advertir proactivamente
sobre posibles riesgos detectados en los registros (ataques, fallos de recursos, incoherencias) 
con el fin de anticipar riesgos en la infraestructura.

==========================================
Objetivos por orden de prioridad:
==========================================
Objetivo_01 - Aplicar Integración Continua
Objetivo_02 - Mejorar la arquitectura e infraestructura de monitorización
Objetivo_03 - Establecer una separación clara de servicios para adelantarnos ante un posible escalado de infraestructura
Objetivo_04 - Trasladar la BBDD montada en CapRover a un contenedor propio PostgreSQL
Objetivo_05 - Establecer un rate-limiting para evitar spam ante posibles ataques masivos
Objetivo_06 - Preveer una posible integración futura con Kubernetes

==========================================
Detalles del proyecto:
==========================================

https://github.com/eboe62/server_monitoring_2509.git

Ubicación de Servidor_DigitalOcean_Definicion_Proyecto_2509.txt


Ubicación de logs_sumary.txt
https://github.com/eboe62/server_monitoring_2509/tree/develop


[168][root@eob-250501a: ~]$ docker ps
CONTAINER ID   IMAGE                               COMMAND                  CREATED              STATUS                 PORTS                                                                      NAMES
06ec2a15be97   caprover/certbot-sleeping:v2.11.0   "/bin/sh -c 'sleep 9…"   41 seconds ago       Up 37 seconds          80/tcp, 443/tcp                                                            captain-certbot.1.ic9r4trhye2gmao9zxq0hihb9
dcb1157a0ecf   nginx:1.24                          "/docker-entrypoint.…"   54 seconds ago       Up 54 seconds          0.0.0.0:80->80/tcp, :::80->80/tcp, 0.0.0.0:443->443/tcp, :::443->443/tcp   captain-nginx.1.vizd9mb3wodev5ucy6kxf3ai7
0226d4717e77   caprover/caprover:1.12.0            "docker-entrypoint.s…"   About a minute ago   Up About a minute      0.0.0.0:3000->3000/tcp, :::3000->3000/tcp                                  captain-captain.1.sx48lfebqu34bmlvnst3mnivl
8f9f0782b886   monitoring-cron:latest              "docker-entrypoint.sh"   2 hours ago          Up 2 hours                                                                                        monitoring-cron
7a4a3ea1acd0   smtp_relay_smtp-relay               "/patch-postfix.sh"      2 hours ago          Up 2 hours (healthy)   127.0.0.1:2526->587/tcp                                                    smtp-relay
7493c57be5d8   postgres:14.3                       "docker-entrypoint.s…"   2 hours ago          Up 2 hours             5432/tcp                                                                   srv-captain--security250226app.1.8mi2sryroumujh5lzjv4winul
2845a26076ba   data-container_data-container       "nginx -g 'daemon of…"   8 months ago         Up 2 hours             0.0.0.0:8080->80/tcp, [::]:8080->80/tcp                                    data-container_data-container_1



[178][root@eob-250501a: /opt/monitoring]$ docker images
REPOSITORY                          TAG       IMAGE ID       CREATED         SIZE
monitoring-cron                     latest    1094ea4a4005   3 hours ago     360MB
monitoring-python                   latest    18e91ee1eb7f   3 hours ago     332MB
monitoring-base                     latest    d144090b03c2   3 hours ago     332MB
smtp_relay_smtp-relay               latest    16d5ed169b94   3 hours ago     232MB
remote-desktop_x2go-server          latest    ab8b2f56eeb7   7 months ago    3.86GB
data-container_data-container       latest    86f6a58ea9b0   8 months ago    11.3MB
caprover/caprover                   1.12.0    543b1bf9c296   12 months ago   470MB
caprover/certbot-sleeping           v2.11.0   4d9436900305   15 months ago   117MB
nginx                               1.24      6c0218f16876   2 years ago     142MB
postgres                            14.3      5b21e2e86aab   3 years ago     376MB
img-captain-security250226app       0         895d05795b96   4 years ago     21.8MB
img-captain-security250226app       latest    895d05795b96   4 years ago     21.8MB
caprover/caprover-placeholder-app   latest    895d05795b96   4 years ago     21.8MB



[179][root@eob-250501a: /opt/monitoring]$ docker network ls
NETWORK ID     NAME                      DRIVER    SCOPE
eefd7f7212df   bridge                    bridge    local
4wxwwj9ik2p5   captain-overlay-network   overlay   swarm
b3010fff4c36   data-container_default    bridge    local
bd4685bc1047   docker_gwbridge           bridge    local
44aa00cfa8af   host                      host      local
pxv97gfaxaoc   ingress                   overlay   swarm
f0282f9f3518   none                      null      local
a68ec716f56e   smtp_relay_default        bridge    local



[170][root@eob-250501a: ~]$ docker inspect 7493c57be5d8  | grep Mounts -A 10
            "Mounts": [
                {
                    "Type": "volume",
                    "Source": "captain--security250226app-data",
                    "Target": "/var/lib/postgresql/data"
                }
            ],
            "MaskedPaths": [
                "/proc/asound",
                "/proc/acpi",
                "/proc/kcore",
--
        "Mounts": [
            {
                "Type": "volume",
                "Name": "captain--security250226app-data",
                "Source": "/var/lib/docker/volumes/captain--security250226app-data/_data",
                "Destination": "/var/lib/postgresql/data",
                "Driver": "local",
                "Mode": "z",
                "RW": true,
                "Propagation": ""
            }



[173][root@eob-250501a: /opt/monitoring]$ cat cron/monitoring.cron
# Auditoria de Binarios (con log propio)
0 11 * * * /opt/monitoring/scripts/auditoria_binarios.sh

# Recursos Docker cada hora (usa docker_resources.sh con logging incluido)
*/10 * * * * /opt/monitoring/scripts/docker_resources.sh

# Jobs de log_ingestor (cada 10 min, con wrappers que redirigen logs)
*/10 * * * * /opt/monitoring/scripts/log_ingest_batch.sh
*/10 * * * * /opt/monitoring/scripts/log_fail2ban_batch.sh
*/10 * * * * /opt/monitoring/scripts/log_kern_batch.sh
*/10 * * * * /opt/monitoring/scripts/log_ip_geolocation.sh

# Alertas de riesgo a las 10h y 22h
0 10,22 * * * /opt/monitoring/scripts/alert_risk.sh



[174][root@eob-250501a: /opt/monitoring]$ crontab -l
# Configurar permisos y ejecutar configure_docker_limits.sh al reiniciar
@reboot chmod +x /usr/local/bin/configure_docker_limits.sh && sleep 60 && /bin/bash /usr/local/bin/configure_docker_limits.sh > /var/log/configure_docker_limits.log 2>&1

# Ejecutar configure_docker_limits.sh cada 10 minutos
*/10 * * * * /usr/local/bin/configure_docker_limits.sh > /var/log/configure_docker_limits.log 2>&1